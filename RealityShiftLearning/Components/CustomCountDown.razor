@implements IDisposable

@if (state != null)
{
    @ChildContent(state)
}
@code {

    private GlobalTimer.TimerStateSnapshot state;

    private System.Threading.CancellationTokenSource cancSource = new System.Threading.CancellationTokenSource();

    [Parameter]
    public RenderFragment<GlobalTimer.TimerStateSnapshot> ChildContent { get; set; }
    [Parameter]
    public GlobalTimer Timer { get; set; }

    protected override void OnParametersSet()
    {
        TickTask(); // Must be not awaited
    }

    private async Task TickTask()
    {
        while (!cancSource.IsCancellationRequested)
        {
            await Task.Delay(TimeSpan.FromSeconds(0.5));
            if (Timer == null)
            {
                continue;
            }
            state = Timer.GetCurrentState();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cancSource.Cancel();
    }
}
