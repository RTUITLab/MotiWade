@implements IDisposable

@if (state != null)
{
    @ChildContent(state)
}
else
{
    <p>00:00:00</p>
}
@code {

    private TomatoTimer.TimerStateSnapshot state;

    private System.Threading.CancellationTokenSource cancSource = new System.Threading.CancellationTokenSource();

    [Parameter]
    public RenderFragment<TomatoTimer.TimerStateSnapshot> ChildContent { get; set; }
    [Parameter]
    public TomatoTimer Timer { get; set; }

    [Parameter]
    public EventCallback OnWorkEnd { get; set; }

    [Parameter]
    public EventCallback OnFreeEnd { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
#pragma warning disable CS4014
        TickTask(); // Must be not awaited
#pragma warning restore CS4014
    }

    private async Task TickTask()
    {
        while (!cancSource.IsCancellationRequested)
        {
            await Task.Delay(TimeSpan.FromSeconds(0.5));
            if (Timer == null)
            {
                continue;
            }
            var oldState = state;
            state = Timer.GetCurrentState();
            if (oldState?.State == TomatoTimer.TimerState.Work
                && state.State == TomatoTimer.TimerState.Free
                && OnWorkEnd.HasDelegate)
            {
                await OnWorkEnd.InvokeAsync(null);
            }
            if (oldState?.State == TomatoTimer.TimerState.Free
                && state.State == TomatoTimer.TimerState.Work
                && OnFreeEnd.HasDelegate)
            {
                await OnFreeEnd.InvokeAsync(null);
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        cancSource.Cancel();
    }
}
