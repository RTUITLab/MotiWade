@page "/admin/groupmanagment"
@layout AdminLayout
@inject LearnDbContext dbContext

<div class="mw-current-group">Group 12-11-13</div>

<Card Bordered="false" Style="margin: 20px 0;">
    <Form Loading="saving"
          Model="@creatingExercise"
          LabelCol="new ColLayoutParam { Span = 5 }"
          WrapperCol="new ColLayoutParam { Offset = 2 }"
          OnFinish="CreateExercise">
        <Row>
            <Col Span="7">
                <FormItem Label="Title">
                    <Input @bind-Value="@context.Title" />
                </FormItem>
                <FormItem Label="Link">
                    <Input @bind-Value="@context.ResourceLink" />
                </FormItem>
            </Col>

            <Col Span="7" Offset="2">
                <FormItem Label="Tech">
                    <InputText Disabled @bind-Value="@timeTechType"></InputText> 
                </FormItem>
                <FormItem Label="Iterations">
                    <AntDesign.InputNumber @bind-Value="context.Iterations" />
                </FormItem>
            </Col>

            <Col Span="7" Offset="1">
            <Row Justify="end">
                <Col>
                <FormItem Class="mw-inline-buttons">
                    <Button @onclick="ClearForm">
                        Clear
                    </Button>
                </FormItem>
                <FormItem Class="mw-inline-buttons">
                    <Button Type="@ButtonType.Primary" HtmlType="submit">
                        Add
                    </Button>
                </FormItem>
                </Col>
            </Row>
            </Col>
        </Row>
    </Form>
</Card>

<Table DataSource="@users"
       Total="_total"
       @bind-PageIndex="_pageIndex"
       @bind-PageSize="_pageSize"
       OnPageIndexChange="async e=>await FetchUsers(e.PageIndex, e.PageSize)">

    @*<Selection Key="@(context.Id.ToString())" />*@
    <Column Title="StudentId" @bind-Field="@context.Id" Sortable />
    <Column @bind-Field="@context.Email" Sortable />
    <Column @bind-Field="@context.Score" Sortable />
    <Column Title="Task" @bind-Field="@context.ExerciseName" Sortable>
        <div class="@($"mw-status-circle mv-status-{context.ExerciseProgress}")"></div>@context.ExerciseName
    </Column>
    <Column @bind-Field="@context.Done" Sortable />
    <Column @bind-Field="@context.Emotion" Sortable />
</Table>

<style>
    .mw-current-group {
        font-size: 18px;
    }

    .mw-inline-buttons {
        display: inline-block;
    }

    .mw-status-circle {
        display: inline-block;
        margin-right: 5px;
        vertical-align: middle;
        width: 5px;
        height: 5px;
        border-radius: 5px;
        background-color: rgba(0, 0, 0, 0.25);
    }

    .mv-status-ToDo {
        background-color: #f5222d;
    }

    .mv-status-InProgress {
        background-color: #1890ff;
    }

    .mv-status-Done {
        background-color: #52c41a;
    }
</style>

@code {
    Dictionary<string, TimeTechType> converter = new Dictionary<string, TimeTechType>
    {
        {"Tomato", TimeTechType.Tomato },
        {"10 minutes", TimeTechType._10Minutes }
    };
    List<string> autoCompliteOptions = new List<string>() { "Tomato", "10 minutes" };
    private string timeTechType = "Tomato";

    private Exercise creatingExercise = new Exercise();

    private List<TableRow> users;
    int _pageIndex = 1;
    int _pageSize = 10;
    int _total = 0;

    protected void ClearForm()
    {
        creatingExercise = new Exercise();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await FetchUsers(_pageIndex, _pageSize);
    }

    void OnInput (ChangeEventArgs e)
    {
        creatingExercise.TimeTechType = converter[e.Value.ToString()];
    }

    protected async Task FetchUsers(int index, int size)
    {
        _total = await dbContext.UserToExercises.CountAsync();
        users = await dbContext.UserToExercises.Skip(size * (index - 1)).Take(size).Select(ute => new TableRow
        {
            Id = ute.UserId,
            Email = ute.User.Email,
            ExerciseName = ute.Exercise.Title,
            ExerciseProgress = ute.ExerciseProgress,
            Score = ute.Exercise.Score,
            Done = ute.FinishTime,
            Emotion = ute.Emotion
        }).ToListAsync();
    }
    bool saving = false;
    private async Task CreateExercise()
    {
        saving = true;
        await Task.Delay(1000);
        saving = false;
        creatingExercise.TimeTechType = TimeTechType.Tomato;
        try
        {
            await dbContext.Exercises.AddAsync(creatingExercise);
            var userIds = await dbContext.Users.Select(u => u.Id).ToListAsync();
            var links = userIds.Select(id => new UserToExercise
            {
                Exercise = creatingExercise,
                UserId = id
            }).ToList();
            dbContext.UserToExercises.AddRange(links);
            await dbContext.SaveChangesAsync();
        } finally
        {
            saving = false;
        }
    }

    class TableRow
    {
        public string Id { get; set; }
        public string Email { get; set; }
        public string ExerciseName { get; set; }
        public ExerciseProgress ExerciseProgress { get; set; }
        public int Score { get; set; }
        public DateTimeOffset? Done { get; set; }
        public string Emotion { get; set; }
    }
}
