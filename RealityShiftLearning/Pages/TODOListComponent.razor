@page "/todo"
@inject LearnDbContext dbContext

<h3>TODO List</h3>


<div>
    <Row>
        <Col Span="24">

        <EditForm Model="@FormModel" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <Search Placeholder="Write new TODO item here..." Size="@InputSize.Large" EnterButton="@("Add")" @bind-Value="@FormModel.Title" OnSearch="OnSearch" />
        </EditForm>
        </Col>
    </Row>

    <Row Class="todo-list-box">
        <Col Span="24">
        @if (sampleArr == null)
        {
            <p>Loading</p>
        }
        else
        {
            <AntList Bordered DataSource="@sampleArr" Size="large">
                <Item Context="item">
                    TODO: @item.Title
                    <Button @onclick="async () => { dbContext.ToDoItems.Remove(item); await dbContext.SaveChangesAsync(); await LoadItems(); }">Delete</Button>
                </Item>
            </AntList>
        }
        </Col>
    </Row>


</div>



<style>

    .todo-list-box {
        margin-top: 15px;
    }
</style>


@code {

    private ToDoItem FormModel = new ToDoItem();

    private List<ToDoItem> sampleArr;

    private void HandleValidSubmit()
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadItems();
    }

    private async Task OnSearch()
    {
        dbContext.ToDoItems.Add(FormModel);
        FormModel = new ToDoItem();
        await dbContext.SaveChangesAsync();
        await LoadItems();
    }

    private async Task LoadItems()
    {
        sampleArr = await dbContext.ToDoItems.ToListAsync();
    }
}
