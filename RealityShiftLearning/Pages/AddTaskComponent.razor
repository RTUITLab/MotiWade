@page "/addTask"
@page "/addTask/{status}"
@attribute [Authorize]

@inject LearnDbContext dbContext
@inject NavigationManager NavigationManager

<div class="mw-container">
    <div class="mw-content-body">

        <div class="mw-bg-waves">
            <img class="mw-bg-waves-img" />
        </div>

        <div class="mw-content-topbar">
            <AuthorizeView>
                <div class="mw-content-topbar-header">Add task</div>
                <div @onclick="@(() => userModelVisible = true)" class="mw-content-topbar-avatar"><Avatar Class="mw-content-topbar-avatar-icon" Shape="square" Size="large" Src="@context.User.Avatar()" Icon="user" /></div>
            </AuthorizeView>
        </div>

        <Form Model="exercise"
              OnFinish="OnFinish">
            <span class="mw-content-item-title">Deadline</span>
            <FormItem style="display: inline-block; margin: 0;">
                <DatePicker @bind-Value="@context.Deadline" TValue="DateTime" Picker="@DatePickerType.Date" />
            </FormItem>
            <div class="mw-content-item-lable">Title</div>
            <FormItem Style="width: 100%; margin: 0;">
                <InputText @bind-Value="@context.Title" Placeholder="Title"></InputText>
            </FormItem>
            <div class="mw-content-item-lable">Link to materials</div>
            <FormItem Style="width: 100%; margin: 0;" WrapperCol="new ColLayoutParam() { Span = 24 }">
                <InputText @bind-Value="@context.ResourceLink" Placeholder="www.universitymoodle.com/maths/sp1"></InputText>
            </FormItem>
            <div class="mw-content-item-lable">Time management technique</div>
            <FormItem Style="width: 100%; margin: 0;" WrapperCol="new ColLayoutParam() { Span = 24 }">
                <InputText @bind-Value="@timeTechType" Disabled></InputText>
            </FormItem>
            <div class="disclaimer">Only one technique is available in Hackathon edit:)</div>
            <div class="mw-content-item-lable">Iterations</div>
            <FormItem Style="width: 100%; margin: 0;" WrapperCol="new ColLayoutParam() { Span = 24 }">
                <AntDesign.InputNumber Style="width: 100%" @bind-Value="@context.Iterations"></AntDesign.InputNumber>
            </FormItem>
            <div class="mw-content-item-lable">Score</div>
            <FormItem Style="width: 100%; margin: 0;" WrapperCol="new ColLayoutParam() { Span = 24 }">
                <AntDesign.InputNumber Style="width: 100%" @bind-Value="@context.Score"></AntDesign.InputNumber>
            </FormItem>

            <Button Style="margin: 30px 0" Type="primary" HtmlType="submit">Add</Button>
        </Form>
    </div>
</div>

<div class="mw-content-navbar">
    <div class="mw-content-navbar-item">
        <img class="mw-content-navbar-item-icon bell" />
        <div class="mw-content-navbar-item-label">Notifications</div>
    </div>
    <div class="mw-content-navbar-item active">
        <img class="mw-content-navbar-item-icon clip" />
        <div class="mw-content-navbar-item-label">Tasks</div>
    </div>
    <div class="mw-content-navbar-item">
        <img class="mw-content-navbar-item-icon stat" />
        <div class="mw-content-navbar-item-label">Progress</div>
    </div>
</div>

<style>
    .disclaimer {
        color: #6b6b6b
    }

    .mw-bg-waves {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        overflow: hidden;
    }

    input {
        width: 100%;
    }

    .mw-bg-waves-img {
        content: url(svg/waves3_black.svg);
        margin-right: 550px;
        margin-top: 250px;
        opacity: 0.1;
    }

    .mw-container {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: calc(63px + 20pt);
        overflow: scroll;
    }

    .mw-content-body {
        width: 100%;
        height: 100vh;
        flex-grow: 1;
        padding: 22px;
        background-color: #f0f0f0;
    }


    .mw-content-topbar {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin: 14px 0;
        align-items: flex-end;
    }

    .mw-content-topbar-header {
        font-size: 28px;
        font-weight: bold;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        color: #1890ff;
        flex-grow: 1;
    }

    .mw-content-topbar-avatar {
        font-size: 28px;
        font-weight: bold;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        color: #6b6b6b;
    }

    .mw-content-topbar-avatar-icon {
        background-color: rgba(0, 0, 0, 0.25);
        color: rgba(0, 0, 0, 0.65);
        font-size: 28px;
    }

        .mw-content-topbar-avatar-icon svg {
            height: 28px;
            width: 28px;
            top: -4px;
            position: relative;
        }


    .mw-content-body > :not(:last-child) {
        margin-bottom: 18px;
    }

    .mw-content-item-title {
        opacity: 0.7;
        display: inline-block;
        font-family: Helvetica;
        font-size: 18px;
        font-weight: bold;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        text-align: center;
        color: #2d2d2d;
        margin-right: 20px;
    }

    .mw-content-item-lable {
        opacity: 0.7;
        display: block;
        font-family: Helvetica;
        font-size: 18px;
        font-weight: bold;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        margin-top: 10px;
        color: #2d2d2d;
    }



    .mw-content-navbar {
        position: fixed;
        height: calc(63px + 20pt);
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #f9f9f9;
        display: flex;
        justify-content: space-evenly;
        align-items: center;
        padding-bottom: 20pt;
    }



    .mw-content-navbar-item {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center
    }

    .mw-content-navbar-item-label {
        font-family: Helvetica;
        font-size: 14px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        text-align: center;
        color: #adadad;
    }

    .mw-content-navbar-item.active .mw-content-navbar-item-label {
        color: #56c6ff;
    }

    .mw-content-navbar-item-icon {
        width: 22px;
        height: 22px;
    }

        .mw-content-navbar-item-icon.bell {
            content: url(svg/navbar-icons/bell_grey.svg);
        }

    .mw-content-navbar-item.active .mw-content-navbar-item-icon.bell {
        content: url(svg/navbar-icons/bell_blue.svg);
    }

    .mw-content-navbar-item-icon.stat {
        content: url(svg/navbar-icons/statistics_grey.svg);
    }

    .mw-content-navbar-item.active .mw-content-navbar-item-icon.stat {
        content: url(svg/navbar-icons/statistics_blue.svg);
    }

    .mw-content-navbar-item-icon.clip {
        content: url(svg/navbar-icons/clipboard_grey.svg);
    }

    .mw-content-navbar-item.active .mw-content-navbar-item-icon.clip {
        content: url(svg/navbar-icons/clipboard_blue.svg);
    }

    .mw-content-item-cardIconBody {
        display: flex;
        flex-direction: row;
    }

    .mw-content-item-cardIcon:not(:last-child) {
        margin-right: 10px;
    }

    .mw-content-item-cardIcon-inner {
        width: 32px;
        height: 32px;
        border-radius: 2px;
    }

    .mw-content-item-cardIcon.flower .mw-content-item-cardIcon-inner {
        content: url(svg/habits/flower.svg);
    }

    .mw-content-item-cardIcon.water .mw-content-item-cardIcon-inner {
        content: url(svg/habits/water.svg);
    }
</style>

@code {
    [Parameter]
    public string status { get; set; }

    private bool userModelVisible = false;
    private bool loading = true;

    private string timeTechType = "Tomato";
    private Exercise exercise = new Exercise();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<UserToExercise> works = new List<UserToExercise>();

    bool saving = false;

    private async Task OnFinish()
    {
        saving = true;
        await Task.Delay(1000);
        saving = false;
        exercise.TimeTechType = TimeTechType.Tomato;
        ExerciseProgress progress = ExerciseProgress.ToDo;
        if (status == "inprogress")
        {
            progress = ExerciseProgress.InProgress;
        }
        if (status == "done")
        {
            progress = ExerciseProgress.Done;
        }
        try
        {
            await dbContext.Exercises.AddAsync(exercise);
            var userIds = await dbContext.Users.Select(u => u.Id).ToListAsync();
            var links = userIds.Select(id => new UserToExercise
            {
                ExerciseProgress = progress,
                Exercise = exercise,
                UserId = id
            }).ToList();
            dbContext.UserToExercises.AddRange(links);
            await dbContext.SaveChangesAsync();
        }
        finally
        {
            saving = false;
            NavigationManager.NavigateTo("/kanban");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (status != "" && status != "todo" && status != "inprogress" && status != "done")
        {
            NavigationManager.NavigateTo("/kanban");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var auth = await authenticationStateTask;
        works = await dbContext.UserToExercises
            .Include(ute => ute.Exercise)
            .Where(ute => ute.UserId == auth.User.UserId())
            .ToListAsync();
        loading = false;
        StateHasChanged();
    }
}
