@page "/"
@namespace RealityShiftLearning.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <title>RealityShiftLearning</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="css/fonts.css" rel="stylesheet" />
    <link href="_content/AntDesign/css/ant-design-blazor.css" rel="stylesheet" />
    <script src="_content/AntDesign/js/ant-design-blazor.js"></script>
</head>
<body>
    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" />
    </app>

    <!--<div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>-->

    <script src="_framework/blazor.server.js"></script>
    <script>
        // Wait until a 'reload' button appears
        new MutationObserver((mutations, observer) => {
            if (document.querySelector('#components-reconnect-modal h5 a')) {
                // Now every 10 seconds, see if the server appears to be back, and if so, reload
                async function attemptReload() {
                    await fetch(''); // Check the server really is back
                    location.reload();
                }
                observer.disconnect();
                attemptReload();
                setInterval(attemptReload, 1000);
            }
        }).observe(document.body, { childList: true, subtree: true });
    </script>
    <script>
        document.gestureRecognition = {

        };
        document.gestureRecognition.subscribers = [];
        document.gestureRecognition.removeSubscriber = function (subscriber) {
            document.gestureRecognition.subscribers = document.gestureRecognition.subscribers
                .filter(function (s) {
                    return s._id != subscriber._id;
                });
        }
        document.addEventListener('touchstart', handleTouchStart, false);
        document.addEventListener('touchmove', handleTouchMove, false);

        var xDown = null;
        var yDown = null;

        function getTouches(evt) {
            return evt.touches ||             // browser API
                evt.originalEvent.touches; // jQuery
        }

        function handleTouchStart(evt) {
            const firstTouch = getTouches(evt)[0];
            xDown = firstTouch.clientX;
            yDown = firstTouch.clientY;
        };

        function handleTouchMove(evt) {
            if (!xDown || !yDown) {
                return;
            }

            var xUp = evt.touches[0].clientX;
            var yUp = evt.touches[0].clientY;

            var xDiff = xDown - xUp;
            var yDiff = yDown - yUp;

            if (Math.abs(xDiff) > Math.abs(yDiff)) {/*most significant*/
                if (xDiff > 0) {
                    /* left swipe */
                    document.gestureRecognition.subscribers.forEach(function (s) {
                        s.invokeMethodAsync("TriggerLeft");
                    });
                } else {
                    /* right swipe */
                    document.gestureRecognition.subscribers.forEach(function (s) {
                        s.invokeMethodAsync("TriggerRight");
                    });
                }
            } else {
                if (yDiff > 0) {
                    /* up swipe */
                } else {
                    /* down swipe */
                }
            }
            /* reset values */
            xDown = null;
            yDown = null;
        };
    </script>
    <script>
        document.mobileAppInterop = {
            isIosApp: false,
            setIsIosApp: function () {
                document.mobileAppInterop.isIosApp = true;
            },

            setAuthState: function (isAuthenticated, userId) {
                const obj = { isAuthenticated: isAuthenticated, userId: userId };
                if (document.mobileAppInterop.isIosApp) {
                    webkit.messageHandlers.auth.postMessage(obj)
                }
            }
        }

    </script>
    <style>
        app {
            width: 100%;
            min-height: 100%;
        }
    </style>
</body>
</html>
